package converterr;

import java.math.BigDecimal;
import javax.swing.JOptionPane;

public class Donusturucu extends javax.swing.JFrame {

    public Donusturucu() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabbedPane = new javax.swing.JTabbedPane();
        panelSicaklik = new javax.swing.JPanel();
        degerSicaklik = new javax.swing.JTextField();
        sonucSicaklik = new javax.swing.JTextField();
        btnSicaklik = new javax.swing.JButton();
        birimSicaklik = new javax.swing.JComboBox();
        panelAgirlik = new javax.swing.JPanel();
        birimAgirlik = new javax.swing.JComboBox();
        sonucAgirlik3 = new javax.swing.JTextField();
        sonucAgirlik5 = new javax.swing.JTextField();
        sonucAgirlik6 = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        sonucAgirlik = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        sonucAgirlik2 = new javax.swing.JTextField();
        degerAgirlik = new javax.swing.JTextField();
        sonucAgirlik4 = new javax.swing.JTextField();
        btnAgirlik = new javax.swing.JButton();
        panelHacim = new javax.swing.JPanel();
        degerHacim = new javax.swing.JTextField();
        btnHacim = new javax.swing.JButton();
        birimHacim = new javax.swing.JComboBox();
        sonucHacim6 = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        sonucHacim = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        sonucHacim2 = new javax.swing.JTextField();
        sonucHacim4 = new javax.swing.JTextField();
        sonucHacim3 = new javax.swing.JTextField();
        sonucHacim5 = new javax.swing.JTextField();
        panelAlan = new javax.swing.JPanel();
        degerAlan = new javax.swing.JTextField();
        sonucAlan3 = new javax.swing.JTextField();
        btnAlan = new javax.swing.JButton();
        birimAlan = new javax.swing.JComboBox();
        sonucAlan4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        sonucAlan5 = new javax.swing.JTextField();
        sonucAlan2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        panelHiz = new javax.swing.JPanel();
        degerHiz = new javax.swing.JTextField();
        sonucHiz = new javax.swing.JTextField();
        btnHiz = new javax.swing.JButton();
        birimHiz = new javax.swing.JComboBox();
        panelUzunluk = new javax.swing.JPanel();
        degerUzunluk = new javax.swing.JTextField();
        btnUzunluk = new javax.swing.JButton();
        birimUzunluk = new javax.swing.JComboBox();
        sonucUzunluk3 = new javax.swing.JTextField();
        sonucUzunluk5 = new javax.swing.JTextField();
        sonucUzunluk6 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        sonucUzunluk = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        sonucUzunluk2 = new javax.swing.JTextField();
        sonucUzunluk4 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Converter");
        setAlwaysOnTop(true);
        setLocation(new java.awt.Point(150, 150));
        setPreferredSize(new java.awt.Dimension(1045, 490));
        setResizable(false);
        setType(java.awt.Window.Type.UTILITY);

        tabbedPane.setForeground(new java.awt.Color(0, 51, 102));
        tabbedPane.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabbedPane.setFont(new java.awt.Font("Bahnschrift", 1, 20)); // NOI18N
        tabbedPane.setName(""); // NOI18N

        panelSicaklik.setBackground(new java.awt.Color(0, 102, 102));

        degerSicaklik.setBackground(new java.awt.Color(204, 255, 255));
        degerSicaklik.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        degerSicaklik.setForeground(new java.awt.Color(102, 0, 0));
        degerSicaklik.setText("Değer giriniz");
        degerSicaklik.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                degerSicaklikMouseClicked(evt);
            }
        });

        sonucSicaklik.setEditable(false);
        sonucSicaklik.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnSicaklik.setBackground(new java.awt.Color(204, 255, 255));
        btnSicaklik.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnSicaklik.setForeground(new java.awt.Color(102, 0, 0));
        btnSicaklik.setText("DÖNÜŞTÜR");
        btnSicaklik.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnSicaklik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSicaklikActionPerformed(evt);
            }
        });

        birimSicaklik.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birimSicaklik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Celsius (°C)", "Fahrenheit (°F)", "Kelvin (°K)", "Réaumur (°R)" }));
        birimSicaklik.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout panelSicaklikLayout = new javax.swing.GroupLayout(panelSicaklik);
        panelSicaklik.setLayout(panelSicaklikLayout);
        panelSicaklikLayout.setHorizontalGroup(
            panelSicaklikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSicaklikLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(degerSicaklik, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSicaklikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSicaklikLayout.createSequentialGroup()
                        .addComponent(btnSicaklik)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelSicaklikLayout.createSequentialGroup()
                        .addComponent(birimSicaklik, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sonucSicaklik, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelSicaklikLayout.setVerticalGroup(
            panelSicaklikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSicaklikLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(panelSicaklikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sonucSicaklik, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(degerSicaklik, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(birimSicaklik))
                .addGap(18, 18, 18)
                .addComponent(btnSicaklik, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(211, Short.MAX_VALUE))
        );

        tabbedPane.addTab("     SICAKLIK     ", panelSicaklik);

        panelAgirlik.setBackground(new java.awt.Color(0, 102, 102));

        birimAgirlik.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birimAgirlik.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "yoktogram(yg)", "zeptogram(zg)", "attogram(ag)", "femtogram(fg)", "pikogram(pg)", "nanogram(ng)", "mikrogram(µg)", "miligram(mg)", "santigram(cg)", "desigram(dg)", "gram(g)", "dekagram(dag)", "hektogram(hg)", "kilogram(kg)", "megagram(ton)(Mg)", "gigagram(Gg)", "teragram(Tg)", "petagram(Pg)", "egzagram(Eg)", "zettagram(Zg)", "yottagram(Yg)", "ons(oz)", "pound(libre)(lb)", "stone(st)" }));
        birimAgirlik.setSelectedIndex(10);
        birimAgirlik.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        sonucAgirlik3.setEditable(false);
        sonucAgirlik3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucAgirlik5.setEditable(false);
        sonucAgirlik5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucAgirlik6.setEditable(false);
        sonucAgirlik6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 255, 255));
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel9.setText("Imperial Birimler");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(204, 255, 255));
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel10.setText("Metrik Üst Birimler");

        sonucAgirlik.setEditable(false);
        sonucAgirlik.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel11.setForeground(new java.awt.Color(204, 255, 255));
        jLabel11.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel11.setText("Metrik Alt Birimler");

        sonucAgirlik2.setEditable(false);
        sonucAgirlik2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        degerAgirlik.setBackground(new java.awt.Color(204, 255, 255));
        degerAgirlik.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        degerAgirlik.setForeground(new java.awt.Color(102, 0, 0));
        degerAgirlik.setText("Değer giriniz");
        degerAgirlik.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                degerAgirlikMouseClicked(evt);
            }
        });

        sonucAgirlik4.setEditable(false);
        sonucAgirlik4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        btnAgirlik.setBackground(new java.awt.Color(204, 255, 255));
        btnAgirlik.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnAgirlik.setForeground(new java.awt.Color(102, 0, 0));
        btnAgirlik.setText("DÖNÜŞTÜR");
        btnAgirlik.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAgirlik.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgirlikActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelAgirlikLayout = new javax.swing.GroupLayout(panelAgirlik);
        panelAgirlik.setLayout(panelAgirlikLayout);
        panelAgirlikLayout.setHorizontalGroup(
            panelAgirlikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgirlikLayout.createSequentialGroup()
                .addGroup(panelAgirlikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAgirlikLayout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(btnAgirlik))
                    .addGroup(panelAgirlikLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(degerAgirlik, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(birimAgirlik, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAgirlikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sonucAgirlik6)
                    .addComponent(sonucAgirlik3)
                    .addComponent(sonucAgirlik5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(jLabel11, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(sonucAgirlik2)
                    .addComponent(sonucAgirlik4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sonucAgirlik, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        panelAgirlikLayout.setVerticalGroup(
            panelAgirlikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAgirlikLayout.createSequentialGroup()
                .addGroup(panelAgirlikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAgirlikLayout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(sonucAgirlik, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucAgirlik2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucAgirlik3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucAgirlik4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAgirlikLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btnAgirlik, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelAgirlikLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(birimAgirlik, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(degerAgirlik, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sonucAgirlik5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sonucAgirlik6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        tabbedPane.addTab("      AĞIRLIK      ", panelAgirlik);

        panelHacim.setBackground(new java.awt.Color(0, 102, 102));

        degerHacim.setBackground(new java.awt.Color(204, 255, 255));
        degerHacim.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        degerHacim.setForeground(new java.awt.Color(102, 0, 0));
        degerHacim.setText("Değer giriniz");
        degerHacim.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                degerHacimMouseClicked(evt);
            }
        });

        btnHacim.setBackground(new java.awt.Color(204, 255, 255));
        btnHacim.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnHacim.setForeground(new java.awt.Color(102, 0, 0));
        btnHacim.setText("DÖNÜŞTÜR");
        btnHacim.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHacim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHacimActionPerformed(evt);
            }
        });

        birimHacim.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birimHacim.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "milimetreküp(mm³)", "santimetreküp(cm³)", "desimetreküp(dm³)", "metreküp(m³)", "dekametreküp(dam³)", "hektometreküp(hm³)", "kilometreküp(km³)", "mililitre(ml)", "santilitre(cl)", "desilitre(dl)", "litre(lt)", "dekalitre(dal)", "hektolitre(hl)", "kilolitre(kl)", "sıvı ons(oz)", "inçküp(in³)", "feetküp(ft³)", "galon(gal)" }));
        birimHacim.setSelectedIndex(10);
        birimHacim.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        sonucHacim6.setEditable(false);
        sonucHacim6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel12.setForeground(new java.awt.Color(204, 255, 255));
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("Imperial Birimler");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(204, 255, 255));
        jLabel13.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel13.setText("Metrik Üst Birimler");

        sonucHacim.setEditable(false);
        sonucHacim.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel14.setForeground(new java.awt.Color(204, 255, 255));
        jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel14.setText("Metrik Alt Birimler");

        sonucHacim2.setEditable(false);
        sonucHacim2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucHacim4.setEditable(false);
        sonucHacim4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucHacim3.setEditable(false);
        sonucHacim3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucHacim5.setEditable(false);
        sonucHacim5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout panelHacimLayout = new javax.swing.GroupLayout(panelHacim);
        panelHacim.setLayout(panelHacimLayout);
        panelHacimLayout.setHorizontalGroup(
            panelHacimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHacimLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelHacimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelHacimLayout.createSequentialGroup()
                        .addComponent(degerHacim, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(birimHacim, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnHacim))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelHacimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sonucHacim6)
                    .addComponent(sonucHacim3)
                    .addComponent(sonucHacim5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(sonucHacim2)
                    .addComponent(sonucHacim4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sonucHacim, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        panelHacimLayout.setVerticalGroup(
            panelHacimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHacimLayout.createSequentialGroup()
                .addGroup(panelHacimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHacimLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btnHacim, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelHacimLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(birimHacim, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(degerHacim, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(panelHacimLayout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(sonucHacim, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucHacim2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucHacim3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucHacim4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucHacim5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucHacim6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(73, Short.MAX_VALUE))
        );

        tabbedPane.addTab("       HACİM       ", panelHacim);

        panelAlan.setBackground(new java.awt.Color(0, 102, 102));

        degerAlan.setBackground(new java.awt.Color(204, 255, 255));
        degerAlan.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        degerAlan.setForeground(new java.awt.Color(102, 0, 0));
        degerAlan.setText("Değer giriniz");
        degerAlan.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                degerAlanMouseClicked(evt);
            }
        });

        sonucAlan3.setEditable(false);
        sonucAlan3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        btnAlan.setBackground(new java.awt.Color(204, 255, 255));
        btnAlan.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnAlan.setForeground(new java.awt.Color(102, 0, 0));
        btnAlan.setText("DÖNÜŞTÜR");
        btnAlan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnAlan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAlanActionPerformed(evt);
            }
        });

        birimAlan.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birimAlan.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "milimetrekare(mm²)", "santimetrekare(cm²)", "desimetrekare(dm²)", "metrekare(m²)", "dekametrekare(dam²)", "hektar(ha)", "kilometrekare(cm²)", "inçkare(in²)", "feetkare(ft²)", "yardkare(yd²)", "acre(ac)" }));
        birimAlan.setSelectedIndex(3);
        birimAlan.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        sonucAlan4.setEditable(false);
        sonucAlan4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Imperial Birimler");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 255, 255));
        jLabel8.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel8.setText("Metrik Üst Birimler");

        sonucAlan5.setEditable(false);
        sonucAlan5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        sonucAlan2.setEditable(false);
        sonucAlan2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("Metrik Alt Birimler");

        javax.swing.GroupLayout panelAlanLayout = new javax.swing.GroupLayout(panelAlan);
        panelAlan.setLayout(panelAlanLayout);
        panelAlanLayout.setHorizontalGroup(
            panelAlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAlanLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelAlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelAlanLayout.createSequentialGroup()
                        .addComponent(degerAlan, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(birimAlan, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(btnAlan))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelAlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sonucAlan2)
                    .addComponent(sonucAlan5)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sonucAlan4)
                    .addComponent(sonucAlan3, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelAlanLayout.setVerticalGroup(
            panelAlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelAlanLayout.createSequentialGroup()
                .addGroup(panelAlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelAlanLayout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucAlan2, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucAlan3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucAlan4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelAlanLayout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(btnAlan, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelAlanLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(birimAlan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(degerAlan, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sonucAlan5, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(113, Short.MAX_VALUE))
        );

        tabbedPane.addTab("       ALAN       ", panelAlan);

        panelHiz.setBackground(new java.awt.Color(0, 102, 102));

        degerHiz.setBackground(new java.awt.Color(204, 255, 255));
        degerHiz.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        degerHiz.setForeground(new java.awt.Color(102, 0, 0));
        degerHiz.setText("Değer giriniz");
        degerHiz.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                degerHizMouseClicked(evt);
            }
        });

        sonucHiz.setEditable(false);
        sonucHiz.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N

        btnHiz.setBackground(new java.awt.Color(204, 255, 255));
        btnHiz.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnHiz.setForeground(new java.awt.Color(102, 0, 0));
        btnHiz.setText("DÖNÜŞTÜR");
        btnHiz.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnHiz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHizActionPerformed(evt);
            }
        });

        birimHiz.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birimHiz.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "kilometre/saat(kph)", "mil/saat(mph)" }));
        birimHiz.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        javax.swing.GroupLayout panelHizLayout = new javax.swing.GroupLayout(panelHiz);
        panelHiz.setLayout(panelHizLayout);
        panelHizLayout.setHorizontalGroup(
            panelHizLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHizLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(degerHiz, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelHizLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelHizLayout.createSequentialGroup()
                        .addComponent(btnHiz)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(panelHizLayout.createSequentialGroup()
                        .addComponent(birimHiz, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(sonucHiz, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panelHizLayout.setVerticalGroup(
            panelHizLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelHizLayout.createSequentialGroup()
                .addGap(93, 93, 93)
                .addGroup(panelHizLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sonucHiz, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(degerHiz, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 35, Short.MAX_VALUE)
                    .addComponent(birimHiz))
                .addGap(18, 18, 18)
                .addComponent(btnHiz, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(211, Short.MAX_VALUE))
        );

        tabbedPane.addTab("        HIZ        ", panelHiz);

        panelUzunluk.setBackground(new java.awt.Color(0, 102, 102));

        degerUzunluk.setBackground(new java.awt.Color(204, 255, 255));
        degerUzunluk.setFont(new java.awt.Font("Tahoma", 1, 16)); // NOI18N
        degerUzunluk.setForeground(new java.awt.Color(102, 0, 0));
        degerUzunluk.setText("Değer giriniz");
        degerUzunluk.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                degerUzunlukMouseClicked(evt);
            }
        });

        btnUzunluk.setBackground(new java.awt.Color(204, 255, 255));
        btnUzunluk.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnUzunluk.setForeground(new java.awt.Color(102, 0, 0));
        btnUzunluk.setText("DÖNÜŞTÜR");
        btnUzunluk.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnUzunluk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUzunlukActionPerformed(evt);
            }
        });

        birimUzunluk.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        birimUzunluk.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "yoktometre(ym)", "zeptometre(zm)", "attometre(am)", "femtometre(fm)", "pikometre(pm)", "nanometre(nm)", "mikrometre(µm)", "milimetre(mm)", "santimetre(cm)", "desimetre(dm)", "metre(m)", "dekametre(dam)", "hektometre(hm)", "kilometre(km)", "megametre(Mm)", "gigametre(Gm)", "terametre(Tm)", "petametre(Pm)", "egzametre(Em)", "zettametre(Zm)", "yottametre(Ym)", "inç(in)", "feet(ft)", "yard(yd)", "mil(mi)", "deniz mili(nmi)" }));
        birimUzunluk.setSelectedIndex(10);
        birimUzunluk.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        sonucUzunluk3.setEditable(false);
        sonucUzunluk3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucUzunluk5.setEditable(false);
        sonucUzunluk5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucUzunluk6.setEditable(false);
        sonucUzunluk6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 255, 255));
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Imperial Birimler");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 255, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Metrik Üst Birimler");

        sonucUzunluk.setEditable(false);
        sonucUzunluk.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 255, 255));
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel5.setText("Metrik Alt Birimler");

        sonucUzunluk2.setEditable(false);
        sonucUzunluk2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        sonucUzunluk4.setEditable(false);
        sonucUzunluk4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N

        javax.swing.GroupLayout panelUzunlukLayout = new javax.swing.GroupLayout(panelUzunluk);
        panelUzunluk.setLayout(panelUzunlukLayout);
        panelUzunlukLayout.setHorizontalGroup(
            panelUzunlukLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUzunlukLayout.createSequentialGroup()
                .addGroup(panelUzunlukLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUzunlukLayout.createSequentialGroup()
                        .addGap(186, 186, 186)
                        .addComponent(btnUzunluk))
                    .addGroup(panelUzunlukLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(degerUzunluk, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(birimUzunluk, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelUzunlukLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sonucUzunluk6)
                    .addComponent(sonucUzunluk3)
                    .addComponent(sonucUzunluk5, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 671, Short.MAX_VALUE)
                    .addComponent(sonucUzunluk2)
                    .addComponent(sonucUzunluk4, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sonucUzunluk, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        panelUzunlukLayout.setVerticalGroup(
            panelUzunlukLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelUzunlukLayout.createSequentialGroup()
                .addGroup(panelUzunlukLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelUzunlukLayout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(7, 7, 7)
                        .addComponent(sonucUzunluk, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucUzunluk2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucUzunluk3, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sonucUzunluk4, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panelUzunlukLayout.createSequentialGroup()
                        .addGap(108, 108, 108)
                        .addComponent(btnUzunluk, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(panelUzunlukLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(birimUzunluk, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(degerUzunluk, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sonucUzunluk5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sonucUzunluk6, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(75, Short.MAX_VALUE))
        );

        tabbedPane.addTab("      UZUNLUK      ", panelUzunluk);

        tabbedPane.setSelectedIndex(1);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 0, 0));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Metric - Imperial sistemler veya birimler arası dönüşüm yapmak için seçiniz:");

        jButton1.setBackground(new java.awt.Color(0, 102, 102));
        jButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(102, 0, 0));
        jButton1.setText("Hakkında");
        jButton1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jButton1.setName("Proje"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tabbedPane)
            .addGroup(layout.createSequentialGroup()
                .addGap(206, 206, 206)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 635, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tabbedPane, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton1.getAccessibleContext().setAccessibleDescription("Proje");

        pack();
    }// </editor-fold>//GEN-END:initComponents
   
    public static String yoktometre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10²⁴";
        return b;
    }
   
    public static String zeptometre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10²¹";
        return b;
    }

    public static String attometre(double a) { // a metre veya gram cinsi gelecek  
        String b = String.valueOf(a);
        b = b + "×10¹⁸";
        return b;
    }

    public static String femtometre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10¹⁵";
        return b;
    }

    public static String pikometre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10¹²";
        return b;
    }

    public static String nanometre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁹";
        return b;
    }

    public static double mikronHesapla(double a) { // a metre cinsi gelecek 
        a = a * 1000000;
        return a;
    }

    public static double mmHesapla(double a) { // a metre cinsi gelecek 
        a = a * 1000;
        return a;
    }

    public static double cmHesapla(double a) { // a metre cinsi gelecek
        a = a * 100;
        return a;
    }

    public static double dmHesapla(double a) { // a metre cinsi gelecek
        a = a * 10;
        return a;
    }

    public static double metre(double a) { //  a yard cinsi gelecek 
        a = a * 0.9144;
        return (a);
    }

    public static double damHesapla(double a) { // a metre cinsi gelecek
        a = a / 10;
        return a;
    }

    public static double hmHesapla(double a) { // a metre cinsi gelecek
        a = a / 100;
        return a;
    }

    public static double kmHesapla(double a) { // a metre cinsi gelecek
        a = a / 1000;
        return a;
    }

    public static String megametre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁻⁶";
        return b;
    }

    public static String gigametre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁻⁹";
        return b;
    }

    public static String terametre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁻¹²";
        return b;
    }

    public static String petametre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁻¹⁵";
        return b;
    }

    public static String egzametre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁻¹⁸";
        return b;
    }

    public static String zettametre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁻²¹";
        return b;
    }

    public static String yottametre(double a) { // a metre veya gram cinsi gelecek 
        String b = String.valueOf(a);
        b = b + "×10⁻²⁴ ";
        return b;
    }
    
    public static String inch(double a) { //  a yard cinsi gelecek 
        a = a * 36;
        return (String.valueOf(a));
    }

    public static String feet(double a) { //  a yard cinsi gelecek 
        a = a * 3;
        return (String.valueOf(a));
    }

    public static double yard(double a) { //  a metre cinsi gelecek 
        a = a / 0.9144;
        return a;
    }

    public static String mil(double a) { //  a yard cinsi gelecek 
        a = a / 1760;
        return (String.valueOf(a));
    }

    public static String nmi(double a) { //  a yard cinsi gelecek 
        a = a / 2025.3718285214;
        return (String.valueOf(a));
    }
    
    public static String stone(double a){ //a ons gelecek stone cevirecek
         a = a / 224;
        return (String.valueOf(a));
    }

    public static String pound(double a){ //a ons gelecek pound cevirecek
         a = a *0.0625;
        return (String.valueOf(a));
    }
    
    public static double ons(double a){  // a gram gelecek onsa cevirecek
        return (a/28.3495);
    }

    public static double gram(double a){  // a ons gelecek grama cevirecek
        return (a*28.3495);
    }
        
    public static BigDecimal hizMph(BigDecimal a) { // kph cinsi gelecek mph cevirecek
        a= a.multiply(new BigDecimal(0.621371192));
        return a;
    }
    
    public static BigDecimal hizKph(BigDecimal a) { // mph cinsi gelecek mph cevirecek
        a= a.multiply(new BigDecimal(1.609344));
        return a;
    }
    
    public static String kelvin(double a){  //a celcius gelecek
        return String.valueOf(a + 273.15);
    }
    
    public static String fahrenheit(double a){  //a celcius gelecek
        return String.valueOf(a * 1.8 + 32);
    }
    
    public static String reomur(double a){  //a celcius gelecek
        return String.valueOf(a* 0.8);
    }
    
    public static String mmkare(double a) { // a metrekare cinsi gelecek 
        return String.valueOf(a*1000000);//+"×10⁶ mm² ";
    }

    public static String cmkare(double a) { // a metrekare cinsi gelecek
        return String.valueOf(a*10000);//+"×10⁴
    }

    public static String dmkare(double a) { // a metrekare cinsi gelecek
        return String.valueOf(a*100);//+"×10²
    }

    public static double metrekare(double a) { //  a ftkare cinsi gelecek 
        return (a*0.09290304);
    }

    public static String damkare(double a) { // a metrekare cinsi gelecek
        return String.valueOf(a/100);//+"×10⁻² dam² ";
    }

    public static String hmkare(double a) { // a metrekare cinsi gelecek
        return String.valueOf(a/10000);//+"×10⁻⁴ ha ";
    }

    public static String kmkare(double a) { // a metrekare cinsi gelecek
        return String.valueOf(a/1000000);//+"×10⁻⁶ km² ";
    }
    
    public static String inckare(double a) { //  a ftkare cinsi gelecek 
        return String.valueOf(a*144);
    }
    
    public static double ftkare(double a) { //  a metrekare cinsi gelecek 
        return (a*10.76391041671);
    }
    
    public static String ydkare(double a) { //  a ftkare cinsi gelecek 
        return String.valueOf(a/9);
    }
    
    public static String acre(double a) { //  a ftkare cinsi gelecek 
        return String.valueOf(a/43560);
    }
     
    public static String removeSciNo(String value) {//bilimsel gösterimi iptal et
        return new BigDecimal(value).toPlainString();
    }
    
    public static String mmkup(double a) { // a metrekup cinsi gelecek
        return String.valueOf(a*1000000000);
    }
    
    public static String cmkup(double a) { // 1 mililitreye esit
        return String.valueOf(a*1000000);  //  metrekup gelecek
    }
    
    public static String dmkup(double a) { // a metrekup cinsi gelecek
        return String.valueOf(a*1000);     // litre ile esit
    }    
    
    public static double mkup(double a) { // a litre cinsi gelecek mkup cevirecek
        return (a/1000);
    }
    
    public static String damkup(double a) { // a metrekup cinsi gelecek
        return String.valueOf(a/1000);
    }
    
    public static String hmkup(double a) { // a metrekup cinsi gelecek
        return String.valueOf(a/1000000);
    }
    
    public static String kmkup(double a) { // a metrekup cinsi gelecek
        return String.valueOf(a/1000000000);
    }
    
    public static String mlitre(double a) { // cmetrekup ile esit
        return String.valueOf(a*1000);      // a litre cinsi gelecek
    }
    
    public static String clitre(double a) { // a litre cinsi gelecek
        return String.valueOf(a*100);
    }
    
    public static String dlitre(double a) { // a litre cinsi gelecek
        return String.valueOf(a*10);
    }
    
    public static double litre(double a) { // a metrekup cinsi gelecek lt cevirecek
        return (a*1000);
    }
    
    public static String dalitre(double a) { // a litre cinsi gelecek
        return String.valueOf(a/10);
    }
    
    public static String hlitre(double a) { // a litre cinsi gelecek
        return String.valueOf(a/100);
    }
    
    public static String klitre(double a) { // a litre cinsi gelecek
        return String.valueOf(a/1000);
    }
    
    public static String sOns(double a) { // a galon cinsi gelecek
        return String.valueOf(a*128);
    }
    
    public static String inckup(double a) { // a galon cinsi gelecek
        return String.valueOf(a*231);
    }
    
    public static String ftkup(double a) { // a galon cinsi gelecek
        return String.valueOf(a*0.13368055555556);
    }
    
    public static double galon(double a) { // a litre cinsi gelecek galon cevirecek
        return (a*0.26417205235815);
    }
    
    private void btnHizActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHizActionPerformed
        try {
            int selectedhiz=birimHiz.getSelectedIndex();

            switch (selectedhiz) {
                case 0:  //kph secilirse
                    BigDecimal kmsa= new BigDecimal(Double.valueOf(this.degerHiz.getText()));
                    sonucHiz.setText(" = "+String.valueOf(hizMph(kmsa))+" mph");
                    break;
                case 1:  //mph secilirse
                    BigDecimal misa= new BigDecimal(Double.valueOf(degerHiz.getText()));
                    sonucHiz.setText(" = "+String.valueOf(hizKph(misa))+" kph");
                    break;   
                default:
                    break;
            }
        } catch (Exception e) {
            degerHiz.setText("Lütfen sayı giriniz!");
        }
    }//GEN-LAST:event_btnHizActionPerformed

    private void btnUzunlukActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUzunlukActionPerformed
        try {
            int selecteduzunluk = birimUzunluk.getSelectedIndex();
            double ym, zm, am, fm, pm, nm, mi, mm, cm, dm, m, dam, hm, km;
            double Mmm, Gmm, Tmm, Pmm, Emm, Zmm, Ymm;
            double in, ft, yd, mile, dmile;
            
            switch (selecteduzunluk) {
                case 0: //ym secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    // m = ym / (Math.pow(10, 24));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ am = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ fm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ nm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ µm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²² cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²³ dm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁻²⁴ in = "
                            +removeSciNo(feet(yd))+"×10⁻²⁴ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁻²⁴ yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁻²⁸ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁻²⁸ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁵ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁶ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴² Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴⁵ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴⁸ Ym");
                    break;
                case 1: //zm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = zm / (Math.pow(10, 21));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³ ym = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ am = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ fm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ pm = "
                            +removeSciNo(String.valueOf(m))+ "×10⁻¹² nm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ µm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁹ cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁰ dm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁻²¹ in = "
                            +removeSciNo(feet(yd))+"×10⁻²¹ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁻²¹ yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁻²⁵ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁻²⁵ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²² dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²³ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴² Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴⁵ Ym");
                    break;
                case 2: //am secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = am / (Math.pow(10, 18));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ ym = "
                            +removeSciNo(String.valueOf(m))+"×10³ zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ fm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ nm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² µm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁶ cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁷ dm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁻¹⁸ in = "
                            +removeSciNo(feet(yd))+"×10⁻¹⁸ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁻¹⁸ yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁻²² mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁻²² nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁹ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁰ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴² Ym");
                    break;
                case 3: //fm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = fm / (Math.pow(10, 15));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ ym = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ zm = "
                            +removeSciNo(String.valueOf(m))+"×10³ am = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ nm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ µm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹³ cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁴ dm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁻¹⁵ in = "
                            +removeSciNo(feet(yd))+"×10⁻¹⁵ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁻¹⁵ yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁻¹⁹ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁻¹⁹ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁶ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁷ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Ym");
                    break;
                case 4: //pm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = pm / (Math.pow(10, 12));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹² ym = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ am = "
                            +removeSciNo(String.valueOf(m))+"×10³ fm = "
                            +removeSciNo(String.valueOf(m))+ "×10⁻³ nm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ µm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁰ cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹¹ dm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁻¹² in = "
                            +removeSciNo(feet(yd))+"×10⁻¹² ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁻¹² yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁻¹⁶ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁻¹⁶ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² m = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹³ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁴ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Ym");
                    break;
                case 5: //nm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = nm / (Math.pow(10, 9));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ ym = "
                            +removeSciNo(String.valueOf(m))+"×10¹² zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ am = "   
                            +removeSciNo(String.valueOf(m))+"×10⁶ fm = "
                            +removeSciNo(String.valueOf(m))+ "×10³ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ µm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁷ cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁸ dm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁻⁹ in = "
                            +removeSciNo(feet(yd))+"×10⁻⁹ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁻⁹ yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁻¹³ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁻¹³ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁰ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹¹ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Ym");
                    break;
                case 6: //mi secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = mi / (Math.pow(10, 6));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ ym = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ zm = "
                            +removeSciNo(String.valueOf(m))+"×10¹² am = "   
                            +removeSciNo(String.valueOf(m))+"×10⁹ fm = "
                            +removeSciNo(String.valueOf(m))+ "×10⁶ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³ nm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴ cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁵ dm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁻⁶ in = "
                            +removeSciNo(feet(yd))+"×10⁻⁶ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁻⁶ yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁻¹⁰ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁻¹⁰ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁷ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁸ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Ym");
                    break;
                case 7: //mm secilirse
                    mm = Double.valueOf(degerUzunluk.getText());
                    m = mm / 1000;
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "   
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm = "
                        +String.valueOf(m)+" m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "
                        +mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+String.valueOf(m)+" m = "
                        +damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm");
                    sonucUzunluk6.setText(" = "+gigametre(m)+" Gm = "
                        +terametre(m)+" Tm = "+petametre(m)+" Pm = "
                        +egzametre(m)+" Em = "+zettametre(m)+" Zm = "
                        +yottametre(m)+" Ym");
                    break;
                case 8: //cm secilirse
                    cm = Double.valueOf(degerUzunluk.getText());
                    m = cm / 100;
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "   
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(dmHesapla(m))+" dm = "
                        +String.valueOf(m)+" m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "
                        +mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+String.valueOf(m)+" m = "
                        +damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm");
                    sonucUzunluk6.setText(" = "+gigametre(m)+" Gm = "
                        +terametre(m)+" Tm = "+petametre(m)+" Pm = "
                        +egzametre(m)+" Em = "+zettametre(m)+" Zm = "
                        +yottametre(m)+" Ym");
                    break;
                case 9: //dm secilirse
                    dm = Double.valueOf(degerUzunluk.getText());
                    m = dm / 10;
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "   
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(m)+" m");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "
                        +mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+String.valueOf(m)+" m = "
                        +damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm");
                    sonucUzunluk6.setText(" = "+gigametre(m)+" Gm = "
                        +terametre(m)+" Tm = "+petametre(m)+" Pm = "
                        +egzametre(m)+" Em = "+zettametre(m)+" Zm = "
                        +yottametre(m)+" Ym");
                    break;
                case 10: //m secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "   
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "
                        +mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+damHesapla(m)+" dam = "
                        +hmHesapla(m)+" hm = "+kmHesapla(m)+" km = "
                        +megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = " +terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 11: //dam secilirse
                    dam = Double.valueOf(degerUzunluk.getText());
                    m = dam * 10;
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "   
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "
                        +mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+String.valueOf(m)+" m = "
                        +hmHesapla(m)+" hm = "+kmHesapla(m)+" km = "
                        +megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 12: //hm secilirse
                    hm = Double.valueOf(degerUzunluk.getText());
                    m = hm * 100;
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "   
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "
                        +mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+String.valueOf(m)+" m = "
                        +damHesapla(m)+" dam = "+kmHesapla(m)+" km = "
                        +megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 13: //km secilirse
                    km = Double.valueOf(degerUzunluk.getText());
                    m = km * 1000;
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "   
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "
                        +mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+String.valueOf(m)+" m = "
                        +damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 14: //Mmm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = Mmm * (Math.pow(10, 6));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ ym = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ zm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ am = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ fm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ nm = "
                            +removeSciNo(String.valueOf(m))+"×10¹² µm = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ mm = "
                            +removeSciNo(String.valueOf(m))+"×10⁸ cm = "
                            +removeSciNo(String.valueOf(m))+"×10⁷ dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁶ in = "
                            +removeSciNo(feet(yd))+"×10⁶ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁶ yd = "
                            +removeSciNo(mil(yd*10000))+"×10² mi = "
                            +removeSciNo(nmi(yd*10000))+"×10² nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁵ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁴ hm = "
                            +removeSciNo(String.valueOf(m))+"×10³ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Gm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Ym");
                    break;
                case 15: //Gmm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = Gmm * (Math.pow(10, 9));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³³ ym = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ zm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ am = "   
                            +removeSciNo(String.valueOf(m))+"×10²⁴ fm = "
                            +removeSciNo(String.valueOf(m))+ "×10²¹ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ nm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ µm = "
                            +removeSciNo(String.valueOf(m))+"×10¹² mm = "
                            +removeSciNo(String.valueOf(m))+"×10¹¹ cm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁰ dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10⁹ in = "
                            +removeSciNo(feet(yd))+"×10⁹ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10⁹ yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁵ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁵ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ m = "
                            +removeSciNo(String.valueOf(m))+"×10⁸ dam = "
                            +removeSciNo(String.valueOf(m))+"×10⁷ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ km = "
                            +removeSciNo(String.valueOf(m))+"×10³ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Ym");
                    break;
                case 16: //Tmm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = Tmm * (Math.pow(10, 12));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ ym = "
                            +removeSciNo(String.valueOf(m))+"×10³³ zm = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ am = "   
                            +removeSciNo(String.valueOf(m))+"×10²⁷ fm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ nm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ µm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ mm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁴ cm = "
                            +removeSciNo(String.valueOf(m))+"×10¹³ dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10¹² in = "
                            +removeSciNo(feet(yd))+"×10¹² ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10¹² yd = "
                            +removeSciNo(mil(yd*10000))+"×10⁸ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10⁸ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹² m = "
                            +removeSciNo(String.valueOf(m))+"×10¹¹ dam = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁰ hm = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ km = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Ym");
                    break;
                case 17: //Pmm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = Pmm * (Math.pow(10, 15));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ ym = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ zm = "
                            +removeSciNo(String.valueOf(m))+"×10³³ am = "   
                            +removeSciNo(String.valueOf(m))+"×10³⁰ fm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ nm = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ µm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ mm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁷ cm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁶ dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10¹⁵ in = "
                            +removeSciNo(feet(yd))+"×10¹⁵ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10¹⁵ yd = "
                            +removeSciNo(mil(yd*10000))+"×10¹¹ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10¹¹ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ m = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁴ dam = "
                            +removeSciNo(String.valueOf(m))+"×10¹³ hm = "
                            +removeSciNo(String.valueOf(m))+"×10¹² km = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10³ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Ym");
                    break;
                case 18: //Emm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = Emm * (Math.pow(10, 18));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁴² ym = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ zm = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ am = "   
                            +removeSciNo(String.valueOf(m))+"×10³³ fm = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ nm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ µm = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ mm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁰ cm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁹ dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10¹⁸ in = "
                            +removeSciNo(feet(yd))+"×10¹⁸ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10¹⁸ yd = "
                            +removeSciNo(mil(yd*10000))+"×10¹⁴ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10¹⁴ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ m = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁷ dam = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁶ hm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ km = "
                            +removeSciNo(String.valueOf(m))+"×10¹² Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10³ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Ym");
                    break;
                case 19: //Zmm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    //m = Zmm * (Math.pow(10, 21));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁴⁵ ym = "
                            +removeSciNo(String.valueOf(m))+"×10⁴² zm = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ am = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ fm = "
                            +removeSciNo(String.valueOf(m))+ "×10³³ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ nm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ µm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ mm = "
                            +removeSciNo(String.valueOf(m))+"×10²³ cm = "
                            +removeSciNo(String.valueOf(m))+"×10²² dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10²¹ in = "
                            +removeSciNo(feet(yd))+"×10²¹ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10²¹ yd = "
                            +removeSciNo(mil(yd*10000))+"×10¹⁷ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10¹⁷ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ m = "
                            +removeSciNo(String.valueOf(m))+"×10²⁰ dam = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁹ hm = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ km = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹² Gm = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10³ Em = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Ym");
                    break;
                case 20: //Ymm secilirse
                    m = Double.valueOf(degerUzunluk.getText());
                    // m = Ymm * (Math.pow(10, 24));
                    sonucUzunluk.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁴⁸ ym = "
                            +removeSciNo(String.valueOf(m))+"×10⁴⁵ zm = "
                            +removeSciNo(String.valueOf(m))+"×10⁴² am = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ fm = "
                            +removeSciNo(String.valueOf(m))+ "×10³⁶ pm");
                    sonucUzunluk2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³³ nm = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ µm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ mm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁶ cm = "
                            +removeSciNo(String.valueOf(m))+"×10²⁵ dm");
                    yd = yard(m);        // metreyi yarda cevirip imperial sistemi yard üzerinden hesaplatmak icin
                    sonucUzunluk3.setText(" = "+removeSciNo(inch(yd))+"×10²⁴ in = "
                            +removeSciNo(feet(yd))+"×10²⁴ ft");
                    sonucUzunluk4.setText(" = "
                            +removeSciNo(String.valueOf(yd))+"×10²⁴ yd = "
                            +removeSciNo(mil(yd*10000))+"×10²⁰ mi = "
                            +removeSciNo(nmi(yd*10000))+"×10²⁰ nmi");
                    sonucUzunluk5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ m = "
                            +removeSciNo(String.valueOf(m))+"×10²³ dam = "
                            +removeSciNo(String.valueOf(m))+"×10²² hm = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ km = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ Mm");
                    sonucUzunluk6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ Gm = "
                            +removeSciNo(String.valueOf(m))+"×10¹² Tm = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Pm = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Em = "
                            +removeSciNo(String.valueOf(m))+"×10³ Zm");
                    break;
                case 21: //in secilirse
                    in = Double.valueOf(degerUzunluk.getText());
                    yd = in / 36;
                    m=metre(yd);
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm = "
                        +String.valueOf(m)+" m");
                    sonucUzunluk3.setText(" = "+feet(yd)+" ft = "+String.valueOf(yd)+" yd");
                    sonucUzunluk4.setText(" = "+mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 22: //ft secilirse
                    ft = Double.valueOf(degerUzunluk.getText());
                    yd = ft / 3;
                    m=metre(yd);
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm = "
                        +String.valueOf(m)+" m");
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+String.valueOf(yd)+" yd");
                    sonucUzunluk4.setText(" = "+mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 23: //yd secilirse
                    yd = Double.valueOf(degerUzunluk.getText());
                    m=metre(yd);
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm = "
                        +String.valueOf(m)+" m");
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+mil(yd)+" mi = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 24: //mile secilirse
                    mile = Double.valueOf(degerUzunluk.getText());
                    yd = mile * 1760;
                    m=metre(yd);
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm = "
                        +String.valueOf(m)+" m");
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "+nmi(yd)+" nmi");
                    sonucUzunluk5.setText(" = "+damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                case 25: //dmile secilirse
                    dmile = Double.valueOf(degerUzunluk.getText());
                    yd = dmile * 2025.3718285214;
                    m=Math.rint(metre(yd));
                    sonucUzunluk.setText(" = "+yoktometre(m)+" ym = "
                        +zeptometre(m)+" zm = "+attometre(m)+" am = "
                        +femtometre(m)+" fm = "+pikometre(m)+ " pm");
                    sonucUzunluk2.setText(" = "+nanometre(m)+" nm = "
                        +mikronHesapla(m)+" µm = "
                        +String.valueOf(mmHesapla(m))+" mm = "
                        +String.valueOf(cmHesapla(m))+" cm = "
                        +String.valueOf(dmHesapla(m))+" dm = "
                        +String.valueOf(m)+" m");
                    sonucUzunluk3.setText(" = "+inch(yd)+" in = "+feet(yd)+" ft");
                    sonucUzunluk4.setText(" = "+String.valueOf(yd)+" yd = "+mil(yd)+" mi");
                    sonucUzunluk5.setText(" = "+damHesapla(m)+" dam = "+hmHesapla(m)+" hm = "
                        +kmHesapla(m)+" km = "+megametre(m)+" Mm = "+gigametre(m)+" Gm");
                    sonucUzunluk6.setText(" = "+terametre(m)+" Tm = "
                        +petametre(m)+" Pm = "+egzametre(m)+" Em = "
                        +zettametre(m)+" Zm = "+yottametre(m)+" Ym");
                    break;
                default:
                    break;
            }
        } catch (Exception e) {
            degerUzunluk.setText("Lütfen sayı giriniz!");
        }
    }//GEN-LAST:event_btnUzunlukActionPerformed

    private void btnSicaklikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSicaklikActionPerformed
        try {
            int selectedsicaklik = birimSicaklik.getSelectedIndex();
            double c, f, k, r;
            switch (selectedsicaklik) {
                case 0: // celsius secilirse
                    c = Double.valueOf(degerSicaklik.getText());
                    sonucSicaklik.setText(" = "+fahrenheit(c)+" °F = " 
                            +kelvin(c)+" °K = "+ reomur(c)+" °R ");
                    break;
                case 1: //fahrenheit secilirse
                    f= Double.valueOf(degerSicaklik.getText());
                    c=(f-32)/1.8;
                    sonucSicaklik.setText(" = "+String.valueOf(c)+" °C = " 
                            +kelvin(c)+" °K = "+ reomur(c)+" °R ");
                    break;
                case 2: //kelvin secilirse
                    k= Double.valueOf(degerSicaklik.getText());
                    c=k-273.15;
                    sonucSicaklik.setText(" = "+String.valueOf(c)+" °C = " 
                            +fahrenheit(c)+" °F = "+ reomur(c)+" °R ");
                    break;
                case 3: //reomur secilirse
                    r = Double.valueOf(degerSicaklik.getText());
                    c = r * 1.25;
                    sonucSicaklik.setText(" = "+String.valueOf(c)+" °C = " 
                            +fahrenheit(c)+" °F = "+ kelvin(c)+" °K ");
                    break;
                default:
                    break;
            }
        } catch (Exception e) {
            degerSicaklik.setText("Lütfen sayı giriniz!");
        }
    }//GEN-LAST:event_btnSicaklikActionPerformed

    private void btnHacimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHacimActionPerformed
        try{
            int selectedhacim = birimHacim.getSelectedIndex();
            double mmku,cmku,dmku,mku,daku,hku,kmku;
            double ml,cl,dl,l,dal,hl,kl;
            double so,inku,ftku,ga;
            switch (selectedhacim) {
                case 0://mmkup secilirse
                    mmku = Double.valueOf(degerHacim.getText());
                    mku=mmku/1000000000;
                    l=litre(mku);
                    ml=mmku*0.001;
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +removeSciNo(String.valueOf(mmku))+"×10⁻³ cm³ = "
                            +removeSciNo(String.valueOf(mmku))+"×10⁻⁶ dm³ = "
                            +removeSciNo(String.valueOf(mmku))+"×10⁻⁹ m³");
                    sonucHacim2.setText("= "
                            +removeSciNo(String.valueOf(ml))+" ml = "
                            +removeSciNo(String.valueOf(ml/10))+" cl = "
                            +removeSciNo(String.valueOf(ml/100))+" dl = "
                            +removeSciNo(String.valueOf(ml))+"×10⁻³ lt");
                    sonucHacim5.setText("= "
                            +removeSciNo(String.valueOf(mmku))+"×10⁻⁹ m³ = "
                            +removeSciNo(String.valueOf(mmku))+"×10⁻¹² dam³ = "
                            +removeSciNo(String.valueOf(mmku))+"×10⁻¹⁵ hm³ = "
                            +removeSciNo(String.valueOf(mmku))+"×10⁻¹⁸ km³");
                    sonucHacim6.setText("= "
                            +removeSciNo(String.valueOf(ml))+"×10⁻³ lt = "
                            +removeSciNo(String.valueOf(ml))+"×10⁻⁴ dal = "
                            +removeSciNo(String.valueOf(ml))+"×10⁻⁵ hl = "
                            +removeSciNo(String.valueOf(ml))+"×10⁻⁶ kl");
                    sonucHacim3.setText("= "+removeSciNo(sOns(ga))+" oz = "
                            +removeSciNo(inckup(ga))+" in³");
                    sonucHacim4.setText("= "+ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 1://cmkup secilirse
                    cmku = Double.valueOf(degerHacim.getText());
                    mku=cmku/1000000;
                    l=litre(mku);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+"mm³ = "
                            +dmkup(mku)+"dm³ = "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻⁶ m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+"ml = "
                            +clitre(l)+"cl = "
                            +dlitre(l)+"dl = "
                            +String.valueOf(l)+"lt");
                    sonucHacim5.setText("= "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻⁶ m³ = "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻⁹ dam³ = "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻¹² hm³ = "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻¹⁵ km³");
                    sonucHacim6.setText("= "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻³ lt = "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻⁴ dal = "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻⁵ hl = "
                            +removeSciNo(String.valueOf(cmku))+"×10⁻⁶ kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 2://dmkup secilirse
                    dmku = Double.valueOf(degerHacim.getText());
                    mku=dmku/1000;
                    l=litre(mku);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +String.valueOf(mku)+" m³ = "
                            +damkup(mku)+" dam³ = "
                            +hmkup(mku)+" hm³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "+sOns(ga)+" oz = "+inckup(ga)+" in³");
                    sonucHacim4.setText("= "+ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 3://mkup secilirse
                    mku = Double.valueOf(degerHacim.getText());
                    l=litre(mku);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +damkup(mku)+" dam³ = "
                            +hmkup(mku)+" hm³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 4://damkup secilirse
                    daku = Double.valueOf(degerHacim.getText());
                    mku=daku*1000;
                    l=litre(mku);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +String.valueOf(mku)+" m³ = "
                            +hmkup(mku)+" hm³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +removeSciNo(sOns(ga))+" oz = "
                            +removeSciNo(inckup(ga))+" in³");
                    sonucHacim4.setText("= "
                            +removeSciNo(ftkup(ga))+" ft³ = "
                            +removeSciNo(String.valueOf(ga))+" gal");
                    break;
                case 5://hmkup secilirse
                    hku = Double.valueOf(degerHacim.getText());
                    mku=hku*1000000;
                    l=litre(mku);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +String.valueOf(mku)+" m³ = "
                            +damkup(mku)+" dam³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +removeSciNo(sOns(ga))+" oz = "
                            +removeSciNo(inckup(ga))+" in³");
                    sonucHacim4.setText("= "
                            +removeSciNo(ftkup(ga))+" ft³ = "
                            +removeSciNo(String.valueOf(ga))+" gal");
                    break;
                case 6://kmkup secilirse
                    kmku = Double.valueOf(degerHacim.getText());
                    mku=kmku*1000000000;
                    l=litre(mku);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +String.valueOf(mku)+" m³ = "
                            +damkup(mku)+" dam³ = "
                            +hmkup(mku)+" hm³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +removeSciNo(sOns(ga))+" oz = "
                            +removeSciNo(inckup(ga))+" in³");
                    sonucHacim4.setText("= "
                            +removeSciNo(ftkup(ga))+" ft³ = "
                            +removeSciNo(String.valueOf(ga))+" gal");
                    break;
                case 7://ml secilirse
                    ml = Double.valueOf(degerHacim.getText());
                    l=ml/1000;
                    mku=mkup(l);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +removeSciNo(cmkup(mku))+"×10³ mm³ = " 
                            +removeSciNo(cmkup(mku))+" cm³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻³ dm³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻⁶ m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +removeSciNo(cmkup(mku))+"×10⁻⁶ m³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻⁹ dam³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻¹² hm³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻¹⁵ km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 8://cl secilirse
                    cl = Double.valueOf(degerHacim.getText());
                    l=cl/100;
                    mku=mkup(l);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +removeSciNo(cmkup(mku))+"×10³ mm³ = " 
                            +removeSciNo(cmkup(mku))+" cm³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻³ dm³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻⁶ m³");
                    sonucHacim2.setText("= "
                            +removeSciNo(mlitre(l))+" ml = "
                            +removeSciNo(dlitre(l))+" dl = "
                            +removeSciNo(String.valueOf(l))+" lt");
                    sonucHacim5.setText("= "
                            +removeSciNo(cmkup(mku))+"×10⁻⁶ m³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻⁹ dam³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻¹² hm³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻¹⁵ km³");
                    sonucHacim6.setText("= "
                            +removeSciNo(String.valueOf(l))+" lt = "
                            +removeSciNo(dalitre(l))+" dal = "
                            +removeSciNo(hlitre(l))+" hl = "
                            +removeSciNo(klitre(l))+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 9://dl secilirse
                    dl = Double.valueOf(degerHacim.getText());
                    l=dl/10;
                    mku=mkup(l);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +removeSciNo(cmkup(mku))+"×10⁻⁶ m³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻⁹ dam³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻¹² hm³ = "
                            +removeSciNo(cmkup(mku))+"×10⁻¹⁵ km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 10://lt secilirse
                    l = Double.valueOf(degerHacim.getText());
                    mku=mkup(l);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +removeSciNo(dmkup(mku))+"×10⁻³ m³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻⁶ dam³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻⁹ hm³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻¹² km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 11://dal secilirse
                    dal = Double.valueOf(degerHacim.getText());
                    l=dal*10;
                    mku=mkup(l);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +removeSciNo(dmkup(mku))+"×10⁻³ m³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻⁶ dam³ = "  
                            +removeSciNo(dmkup(mku))+"×10⁻⁹ hm³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻¹² km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 12://hl secilirse
                    hl = Double.valueOf(degerHacim.getText());
                    l=hl*100;
                    mku=mkup(l);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +String.valueOf(mku)+" m³ = "
                            +String.valueOf(mku*10)+"×10⁻⁴ dam³ = "
                            +String.valueOf(mku*10)+"×10⁻⁷ hm³ = "
                            +String.valueOf(mku*10)+"×10⁻¹⁰ km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +removeSciNo(sOns(ga))+" oz = "
                            +removeSciNo(inckup(ga))+" in³");
                    sonucHacim4.setText("= "
                            +removeSciNo(ftkup(ga))+" ft³ = "
                            +removeSciNo(String.valueOf(ga))+" gal");
                    break;
                case 13://kl secilirse
                    kl = Double.valueOf(degerHacim.getText());
                    l=kl*1000;
                    mku=mkup(l);
                    ga=galon(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +String.valueOf(mku)+" m³ = "
                            +damkup(mku)+" dam³ = "
                            +hmkup(mku)+" hm³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 14://sons secilirse
                    so = Double.valueOf(degerHacim.getText());
                    ga=so/128;
                    l=ga*3.785411784;
                    mku=mkup(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +damkup(mku)+" dam³ = "
                            +hmkup(mku)+" hm³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 15://inku secilirse
                    inku = Double.valueOf(degerHacim.getText());
                    ga=inku/231;
                    l=ga*3.785411784;
                    mku=mkup(l);
                    sonucHacim.setText("= "
                            +mmkup(mku)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +String.valueOf(mku)+" m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +String.valueOf(mku)+" m³ = "
                            +damkup(mku)+" dam³ = "
                            +hmkup(mku)+" hm³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +ftkup(ga)+" ft³ = "
                            +String.valueOf(ga)+" gal");
                    break;
                case 16://ftku secilirse
                    ftku = Double.valueOf(degerHacim.getText());
                    ga=ftku/0.13368055555556;
                    l=ga/0.26417205235815;
                    mku=mkup(l);
                    sonucHacim.setText("= "
                            +removeSciNo(mmkup(mku))+"mm³ = "
                            +cmkup(mku)+"cm³ = "
                            +dmkup(mku)+"dm³ = "
                            +String.valueOf(mku)+"m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");
                    sonucHacim5.setText("= "
                            +damkup(mku)+" dam³ = "
                            +hmkup(mku)+" hm³ = "
                            +kmkup(mku)+" km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +klitre(l)+" kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +String.valueOf(ftku*1728)+" in³");
                    sonucHacim4.setText("= "
                            +String.valueOf(ga)+" gal");
                    break;
                case 17://galon secilirse
                    ga = Double.valueOf(degerHacim.getText());
                    l=ga*3.785411784;
                    mku=mkup(l);
                    sonucHacim.setText("= "
                            +cmkup(mku*1000)+" mm³ = "
                            +cmkup(mku)+" cm³ = "
                            +dmkup(mku)+" dm³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻³ m³");
                    sonucHacim2.setText("= "
                            +mlitre(l)+" ml = "
                            +clitre(l)+" cl = "
                            +dlitre(l)+" dl = "
                            +String.valueOf(l)+" lt");   //×10⁻⁶ ×10⁻⁹ ×10⁻¹² ×10⁻¹⁵
                    sonucHacim5.setText("= "
                            +removeSciNo(dmkup(mku))+"×10⁻⁶ dam³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻⁹ hm³ = "
                            +removeSciNo(dmkup(mku))+"×10⁻¹² km³");
                    sonucHacim6.setText("= "
                            +String.valueOf(l)+" lt = "
                            +dalitre(l)+" dal = "
                            +hlitre(l)+" hl = "
                            +removeSciNo(String.valueOf(l))+"×10⁻³ kl");
                    sonucHacim3.setText("= "
                            +sOns(ga)+" oz = "
                            +inckup(ga)+" in³");
                    sonucHacim4.setText("= "
                            +removeSciNo(ftkup(ga))+" ft³");
                    break;
                default:
                    break;
            }
        } catch (Exception e) {
            degerHacim.setText("Lütfen sayı giriniz!");
        }
    }//GEN-LAST:event_btnHacimActionPerformed

    private void btnAlanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAlanActionPerformed
        try{
            int selectedalan = birimAlan.getSelectedIndex();
            double mmk, cmk, dmk, mk, damk, ha, kmk, ink, ftk, ydk, acr;

            switch (selectedalan) {
                case 0: //milimetrekare secilirse
                    mk = Double.valueOf(degerAlan.getText());
                    sonucAlan2.setText(" = "
                            +removeSciNo(String.valueOf(mk))+"×10⁻² cm²"
                            +" = "+removeSciNo(String.valueOf(mk))+"×10⁻⁴ dm²"
                            +" = "+removeSciNo(String.valueOf(mk))+"×10⁻⁶ m²");
                    sonucAlan5.setText(" = "
                            +removeSciNo(String.valueOf(mk))+"×10⁻⁶ m²"
                            +" = "+removeSciNo(String.valueOf(mk))+"×10⁻⁸ dam²"
                            +" = "+removeSciNo(String.valueOf(mk))+"×10⁻¹⁰ ha"
                            +" = "+removeSciNo(String.valueOf(mk))+"×10⁻¹² km²");
                    ftk=ftkare(mk);  // feetkare uzerinden hesaplatmak icin
                    sonucAlan3.setText(" = "+removeSciNo(inckare(ftk))+"×10⁻⁶ in²"
                            +" = "+removeSciNo(String.valueOf(ftk))+"×10⁻⁶ ft²");
                    sonucAlan4.setText(" = "+removeSciNo(ydkare(ftk))+"×10⁻⁶ yd²"
                            +" = "+removeSciNo(acre(ftk*10000))+"×10⁻¹⁰ ac");
                    break;
                case 1: //cmkare secilirse
                    cmk = Double.valueOf(degerAlan.getText());
                    mk=cmk/10000;
                    sonucAlan2.setText(" = "+mmkare(mk)+" mm²"
                            +" = "+dmkare(mk)+" dm²"
                            +" = "+String.valueOf(mk)+" m²");
                    sonucAlan5.setText(" = "+String.valueOf(mk)+" m²"
                            +" = "+damkare(mk)+" dam²"
                            +" = "+hmkare(mk)+" ha"
                            +" = "+kmkare(mk)+" km²");
                    ftk=ftkare(mk);  // feetkare uzerinden hesaplatmak icin
                    sonucAlan3.setText(" = "+inckare(ftk)+" in²"
                            +" = "+String.valueOf(ftk)+" ft²");
                    sonucAlan4.setText(" = "+ydkare(ftk)+" yd²"
                            +" = "+acre(ftk)+" ac");
                    break;
                case 2: //dmkare secilirse
                    dmk = Double.valueOf(degerAlan.getText());
                    mk = dmk/100;
                    sonucAlan2.setText(" = "+mmkare(mk)+" mm²"
                            +" = "+cmkare(mk)+" cm²"
                            +" = "+String.valueOf(mk)+" m²");
                    sonucAlan5.setText(" = "+String.valueOf(mk)+" m²"
                            +" = "+damkare(mk)+" dam²"
                            +" = "+hmkare(mk)+" ha"
                            +" = "+kmkare(mk)+" km²");
                    ftk=ftkare(mk);  // feetkare uzerinden hesaplatmak icin
                    sonucAlan3.setText(" = "+inckare(ftk)+" in²"
                            +" = "+String.valueOf(ftk)+" ft²");
                    sonucAlan4.setText(" = "+ydkare(ftk)+" yd²"
                            +" = "+acre(ftk)+" ac");
                    break;
                case 3: //mkare secilirse
                    mk = Double.valueOf(degerAlan.getText());
                    sonucAlan2.setText(" = "+mmkare(mk)+" mm²"
                            +" = "+cmkare(mk)+" cm²"
                            +" = "+dmkare(mk)+" dm²");
                    sonucAlan5.setText(" = "+damkare(mk)+" dam²"
                            +" = "+hmkare(mk)+" ha"
                            +" = "+kmkare(mk)+" km²");
                    ftk=ftkare(mk);  // feetkare uzerinden hesaplatmak icin
                    sonucAlan3.setText(" = "+inckare(ftk)+" in²"
                            +" = "+String.valueOf(ftk)+" ft²");
                    sonucAlan4.setText(" = "+ydkare(ftk)+" yd²"
                            +" = "+acre(ftk)+" ac");
                    break;
                case 4: //damkare secilirse
                    damk = Double.valueOf(degerAlan.getText());
                    mk=damk*100;
                    sonucAlan2.setText(" = "+mmkare(mk)+" mm²"
                            +" = "+cmkare(mk)+" cm²"
                            +" = "+dmkare(mk)+" dm²");
                    sonucAlan5.setText(" = "+String.valueOf(mk)+" m²"
                            +" = "+hmkare(mk)+" ha"
                            +" = "+kmkare(mk)+" km²");
                    ftk=ftkare(mk);  // feetkare uzerinden hesaplatmak icin
                    sonucAlan3.setText(" = "+inckare(ftk)+" in²"
                            +" = "+String.valueOf(ftk)+" ft²");
                    sonucAlan4.setText(" = "+ydkare(ftk)+" yd²"
                            +" = "+acre(ftk)+" ac");
                    break;
                case 5: //hektar secilirse
                    ha = Double.valueOf(degerAlan.getText());
                    mk = ha*10000;
                    sonucAlan2.setText(" = "+mmkare(mk)+" mm²"
                            +" = "+cmkare(mk)+" cm²"
                            +" = "+dmkare(mk)+" dm²");
                    sonucAlan5.setText(" = "+String.valueOf(mk)+" m²"
                            +" = "+damkare(mk)+" dam²"
                            +" = "+kmkare(mk)+" km²");
                    ftk=ftkare(mk);  // feetkare uzerinden hesaplatmak icin
                    sonucAlan3.setText(" = "+inckare(ftk)+" in²"
                            +" = "+String.valueOf(ftk)+" ft²");
                    sonucAlan4.setText(" = "+ydkare(ftk)+" yd²"
                            +" = "+acre(ftk)+" ac");
                    break;
                case 6: //kmkare secilirse
                    kmk = Double.valueOf(degerAlan.getText());
                    mk = kmk*1000000;
                    sonucAlan2.setText(" = "+mmkare(mk)+" mm²"
                            +" = "+cmkare(mk)+" cm²"
                            +" = "+dmkare(mk)+" dm²");
                    sonucAlan5.setText(" = "+String.valueOf(mk)+" m²"
                            +" = "+damkare(mk)+" dam²"
                            +" = "+hmkare(mk)+" ha");
                    ftk=ftkare(mk);  // feetkare uzerinden hesaplatmak icin
                    sonucAlan3.setText(" = "+inckare(ftk)+" in²"
                            +" = "+String.valueOf(ftk)+" ft²");
                    sonucAlan4.setText(" = "+ydkare(ftk)+" yd²"
                            +" = "+acre(ftk)+" ac");
                    break;
                case 7: //inckare secilirse
                    ink = Double.valueOf(degerAlan.getText());
                    ftk = ink/144;
                    mk = metrekare(ftk);
                    sonucAlan2.setText(" = "+mmkare(mk)+" mm²"
                            +" = "+cmkare(mk)+" cm²"
                            +" = "+dmkare(mk)+" dm²"
                            +" = "+removeSciNo(String.valueOf(mk))+" m²");
                    sonucAlan5.setText(" = "+String.valueOf(mk)+" m²"
                            +" = "+damkare(mk)+" dam²"
                            +" = "+hmkare(mk)+" ha = "
                            +" = "+kmkare(mk)+" km²");
                    sonucAlan3.setText(" = "+String.valueOf(ftk)+" ft²"
                            +" = "+removeSciNo(ydkare(ftk))+" yd²");
                    sonucAlan4.setText(" = "+removeSciNo(acre(ftk))+" ac");
                    break;
                case 8: //ftkare secilirse
                    ftk = Double.valueOf(degerAlan.getText());
                    mk = metrekare(ftk);
                    sonucAlan2.setText(" = "+removeSciNo(mmkare(mk*100))+"×10⁻² mm²"
                            +" = "+removeSciNo(mmkare(mk*100))+"×10⁻⁴ cm²"
                            +" = "+dmkare(mk)+" dm²"
                            +" = "+String.valueOf(mk)+" m²");
                    sonucAlan5.setText(" = "+String.valueOf(mk)+" m²"
                            +" = "+removeSciNo(damkare(mk*10000))+"×10⁻⁴ dam²"
                            +" = "+hmkare(mk)+" ha = "
                            +" = "+removeSciNo(kmkare(mk*100000000))+"×10⁻⁸ km²");
                    sonucAlan3.setText(" = "+inckare(ftk)+" in²"
                            +" = "+ydkare(ftk)+" yd²");
                    sonucAlan4.setText(" = "+removeSciNo(acre(ftk))+" ac");
                    break;
                case 9: //ydkare secilirse
                    ydk = Double.valueOf(degerAlan.getText());
                    ftk = ydk*9;
                    mk = metrekare(ftk);
                    sonucAlan2.setText(" = "+removeSciNo(cmkare(mk))+"×10² mm²"
                            +" = "+cmkare(mk)+" cm²"
                            +" = "+removeSciNo(cmkare(mk))+"×10⁻² dm²"
                            +" = "+removeSciNo(String.valueOf(mk*10000))+"×10⁻⁴ m²");
                    sonucAlan5.setText(" = "+removeSciNo(damkare(mk*10000))+"×10⁻⁴ dam²"
                            +" = "+removeSciNo(damkare(mk*10000))+"×10⁻⁶ ha = "
                            +" = "+removeSciNo(damkare(mk*10000))+"×10⁻⁸ km²");
                    sonucAlan3.setText(" = "+removeSciNo(inckare(ftk))+" in²"
                            +" = "+removeSciNo(String.valueOf(ftk))+" ft²");
                    sonucAlan4.setText(" = "+removeSciNo(acre(ftk))+" ac");
                    break;
                case 10: //acre secilirse
                    acr = Double.valueOf(degerAlan.getText());
                    ftk=acr*43560;
                    mk = metrekare(ftk);
                    sonucAlan2.setText(" = "+(mmkare(mk))+" mm²"
                            +" = "+(cmkare(mk))+" cm²"
                            +" = "+(dmkare(mk))+" dm²"
                            +" = "+(String.valueOf(mk))+" m²");
                    sonucAlan5.setText(" = "+removeSciNo(damkare(mk*100))+"×10⁻² dam²"
                            +" = "+removeSciNo(hmkare(mk*1000))+"×10⁻³ ha = "
                            +" = "+removeSciNo(kmkare(mk))+" km²");
                    sonucAlan3.setText(" = "+removeSciNo(inckare(ftk))+" in²"
                            +" = "+removeSciNo(String.valueOf(ftk))+" ft²");
                    sonucAlan4.setText(" = "+removeSciNo(ydkare(ftk))+" yd²");
                    break;
                default:
                    break;
            }
        } catch (Exception e) {
            degerAlan.setText("Lütfen sayı giriniz!");
        }
    }//GEN-LAST:event_btnAlanActionPerformed

    private void btnAgirlikActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgirlikActionPerformed
        try {
            int selectedagirlik = birimAgirlik.getSelectedIndex();
            double ym, zm, am, fm, pm, nm, mi, mm, cm, dm, m, dam, hm, km;
            double on, po, sto,yd,mile,dmile,in,ft;
            // gram yerine m degiskeni kullanildi.
            switch (selectedagirlik) {
                case 0: //yg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    // m = ym / (Math.pow(10, 24));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ ag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ fg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ ng");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ µg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²² cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²³ dg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁻²⁴ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁻²⁸ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁻²⁸ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁵ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁶ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴² Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴⁵ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴⁸ Yg");
                    break;
                case 1: //zg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = zm / (Math.pow(10, 21));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³ yg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ ag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ fg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ pg = "
                            +removeSciNo(String.valueOf(m))+ "×10⁻¹² ng");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"⁻¹⁵ µg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁹ cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁰ dg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁻²¹ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁻²⁵ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁻²⁵ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²² dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²³ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴² Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴⁵ Yg");
                    break;
                case 2: //ag secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = am / (Math.pow(10, 18));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ yg = "
                            +removeSciNo(String.valueOf(m))+"×10³ zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ fg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ ng");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² µg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁶ cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁷ dg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁻¹⁸ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁻²² lb = "
                            +removeSciNo(stone(on*10000))+"×10⁻²² st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁹ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁰ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴² Yg");
                    break;
                case 3: //fg secilirse 
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = fm / (Math.pow(10, 15));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ yg = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ zg = "
                            +removeSciNo(String.valueOf(m))+"×10³ ag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ ng");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ µg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹³ cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁴ dg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁻¹⁵ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁻¹⁹ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁻¹⁹ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁶ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁷ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁹ Yg");
                    break;
                case 4: //pg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = pm / (Math.pow(10, 12));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹² yg = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ ag = "
                            +removeSciNo(String.valueOf(m))+"×10³ fg = "
                            +removeSciNo(String.valueOf(m))+ "×10⁻³ ng");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ µg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁰ cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹¹ dg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁻¹² oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁻¹⁶ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁻¹⁶ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² g = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹³ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁴ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁶ Yg");
                    break;
                case 5: //ng secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = nm / (Math.pow(10, 9));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ yg = "
                            +removeSciNo(String.valueOf(m))+"×10¹² zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ ag = "   
                            +removeSciNo(String.valueOf(m))+"×10⁶ fg = "
                            +removeSciNo(String.valueOf(m))+ "×10³ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ µg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁷ cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁸ dg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁻⁹ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁻¹³ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁻¹³ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁰ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹¹ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³³ Yg");
                    break;
                case 6: //mi secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = mi / (Math.pow(10, 6));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ yg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ zg = "
                            +removeSciNo(String.valueOf(m))+"×10¹² ag = "   
                            +removeSciNo(String.valueOf(m))+"×10⁹ fg = "
                            +removeSciNo(String.valueOf(m))+ "×10⁶ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³ ng = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁴ cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁵ dg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁻⁶ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁻¹⁰ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁻¹⁰ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁷ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁸ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²¹ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁴ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻²⁷ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³⁰ Yg");
                    break;
                case 7: //mg secilirse
                    mm = Double.valueOf(degerAgirlik.getText());
                    m = mm / 1000;
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "   
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg = "
                        +String.valueOf(m)+" g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+String.valueOf(m)+" g = "
                        +damHesapla(m)+" dag = "+hmHesapla(m)+" hg = "
                        +kmHesapla(m)+" kg = "+megametre(m)+" Mg");
                    sonucAgirlik6.setText(" = "+gigametre(m)+" Gg = "
                        +terametre(m)+" Tg = "+petametre(m)+" Pg = "
                        +egzametre(m)+" Eg = "+zettametre(m)+" Zg = "
                        +yottametre(m)+" Yg");
                    break;
                case 8: //cg secilirse
                    cm = Double.valueOf(degerAgirlik.getText());
                    m = cm / 100;
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "   
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(dmHesapla(m))+" dg = "
                        +String.valueOf(m)+" g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+String.valueOf(m)+" g = "
                        +damHesapla(m)+" dag = "+hmHesapla(m)+" hg = "
                        +kmHesapla(m)+" kg = "+megametre(m)+" Mg");
                    sonucAgirlik6.setText(" = "+gigametre(m)+" Gg = "
                        +terametre(m)+" Tg = "+petametre(m)+" Pg = "
                        +egzametre(m)+" Eg = "+zettametre(m)+" Zg = "
                        +yottametre(m)+" Yg");
                    break;
                case 9: //dg secilirse
                    dm = Double.valueOf(degerAgirlik.getText());
                    m = dm / 10;
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "   
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(m)+" g");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+String.valueOf(m)+" g = "
                        +damHesapla(m)+" dag = "+hmHesapla(m)+" hg = "
                        +kmHesapla(m)+" kg = "+megametre(m)+" Mg");
                    sonucAgirlik6.setText(" = "+gigametre(m)+" Gg = "
                        +terametre(m)+" Tg = "+petametre(m)+" Pg = "
                        +egzametre(m)+" Eg = "+zettametre(m)+" Zg = "
                        +yottametre(m)+" Yg");
                    break;
                case 10: //g secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "   
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+damHesapla(m)+" dag = "
                        +hmHesapla(m)+" hg = "+kmHesapla(m)+" kg = "
                        +megametre(m)+" Mg = "+gigametre(m)+" Gg");
                    sonucAgirlik6.setText(" = " +terametre(m)+" Tg = "
                        +petametre(m)+" Pg = "+egzametre(m)+" Eg = "
                        +zettametre(m)+" Zg = "+yottametre(m)+" Yg");
                    break;
                case 11: //dag secilirse
                    dam = Double.valueOf(degerAgirlik.getText());
                    m = dam * 10;
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "   
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+String.valueOf(m)+" g = "
                        +hmHesapla(m)+" hg = "+kmHesapla(m)+" kg = "
                        +megametre(m)+" Mg = "+gigametre(m)+" Gg");
                    sonucAgirlik6.setText(" = "+terametre(m)+" Tg = "
                        +petametre(m)+" Pg = "+egzametre(m)+" Eg = "
                        +zettametre(m)+" Zg = "+yottametre(m)+" Yg");
                    break;
                case 12: //hg secilirse
                    hm = Double.valueOf(degerAgirlik.getText());
                    m = hm * 100;
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "   
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+String.valueOf(m)+" g = "
                        +damHesapla(m)+" dag = "+kmHesapla(m)+" kg = "
                        +megametre(m)+" Mg = "+gigametre(m)+" Gg");
                    sonucAgirlik6.setText(" = "+terametre(m)+" Tg = "
                        +petametre(m)+" Pg = "+egzametre(m)+" Eg = "
                        +zettametre(m)+" Zg = "+yottametre(m)+" Yg");
                    break;
                case 13: //kg secilirse
                    km = Double.valueOf(degerAgirlik.getText());
                    m = km * 1000;
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "   
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+String.valueOf(m)+" g = "
                        +damHesapla(m)+" dag = "+hmHesapla(m)+" hg = "
                        +megametre(m)+" Mg = "+gigametre(m)+" Gg");
                    sonucAgirlik6.setText(" = "+terametre(m)+" Tg = "
                        +petametre(m)+" Pg = "+egzametre(m)+" Eg = "
                        +zettametre(m)+" Zg = "+yottametre(m)+" Yg");
                    break;
                case 14: //Mmg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = Mmm * (Math.pow(10, 6));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ yg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ zg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ ag = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ fg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ ng = "
                            +removeSciNo(String.valueOf(m))+"×10¹² µg = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ mg = "
                            +removeSciNo(String.valueOf(m))+"×10⁸ cg = "
                            +removeSciNo(String.valueOf(m))+"×10⁷ dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁶ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10² lb = "
                            +removeSciNo(stone(on*10000))+"×10² st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁵ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁴ hg = "
                            +removeSciNo(String.valueOf(m))+"×10³ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Gg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁸ Yg");
                    break;
                case 15: //Gmg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = Gmm * (Math.pow(10, 9));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³³ yg = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ zg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ ag = "   
                            +removeSciNo(String.valueOf(m))+"×10²⁴ fg = "
                            +removeSciNo(String.valueOf(m))+ "×10²¹ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ ng = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ µg = "
                            +removeSciNo(String.valueOf(m))+"×10¹² mg = "
                            +removeSciNo(String.valueOf(m))+"×10¹¹ cg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁰ dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10⁹ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁵ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁵ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ g = "
                            +removeSciNo(String.valueOf(m))+"×10⁸ dag = "
                            +removeSciNo(String.valueOf(m))+"×10⁷ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ kg = "
                            +removeSciNo(String.valueOf(m))+"×10³ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹⁵ Yg");
                    break;
                case 16: //Tmm secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = Tmm * (Math.pow(10, 12));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ yg = "
                            +removeSciNo(String.valueOf(m))+"×10³³ zg = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ ag = "   
                            +removeSciNo(String.valueOf(m))+"×10²⁷ fg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ ng = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ µg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ mg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁴ cg = "
                            +removeSciNo(String.valueOf(m))+"×10¹³ dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10¹² oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10⁸ lb = "
                            +removeSciNo(stone(on*10000))+"×10⁸ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹² g = "
                            +removeSciNo(String.valueOf(m))+"×10¹¹ dag = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁰ hg = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻¹² Yg");
                    break;
                case 17: //Pmg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = Pmm * (Math.pow(10, 15));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ yg = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ zg = "
                            +removeSciNo(String.valueOf(m))+"×10³³ ag = "   
                            +removeSciNo(String.valueOf(m))+"×10³⁰ fg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ ng = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ µg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ mg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁷ cg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁶ dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10¹⁵ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10¹¹ lb = "
                            +removeSciNo(stone(on*10000))+"×10¹¹ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ g = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁴ dag = "
                            +removeSciNo(String.valueOf(m))+"×10¹³ hg = "
                            +removeSciNo(String.valueOf(m))+"×10¹² kg = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10³ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁹ Yg");
                    break;
                case 18: //Emg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = Emm * (Math.pow(10, 18));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁴² yg = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ zg = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ ag = "   
                            +removeSciNo(String.valueOf(m))+"×10³³ fg = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ ng = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ µg = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ mg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁰ cg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁹ dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10¹⁸ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10¹⁴ lb = "
                            +removeSciNo(stone(on*10000))+"×10¹⁴ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ g = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁷ dag = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁶ hg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ kg = "
                            +removeSciNo(String.valueOf(m))+"×10¹² Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10³ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻⁶ Yg");
                    break;
                case 19: //Zmg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    //m = Zmm * (Math.pow(10, 21));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁴⁵ yg = "
                            +removeSciNo(String.valueOf(m))+"×10⁴² zg = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ ag = "
                            +removeSciNo(String.valueOf(m))+"×10³⁶ fg = "
                            +removeSciNo(String.valueOf(m))+ "×10³³ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ ng = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ µg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ mg = "
                            +removeSciNo(String.valueOf(m))+"×10²³ cg = "
                            +removeSciNo(String.valueOf(m))+"×10²² dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10²¹ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10¹⁷ lb = "
                            +removeSciNo(stone(on*10000))+"×10¹⁷ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ g = "
                            +removeSciNo(String.valueOf(m))+"×10²⁰ dag = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁹ hg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ kg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹² Gg = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10³ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10⁻³ Yg");
                    break;
                case 20: //Ymg secilirse
                    m = Double.valueOf(degerAgirlik.getText());
                    // m = Ymm * (Math.pow(10, 24));
                    sonucAgirlik.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10⁴⁸ yg = "
                            +removeSciNo(String.valueOf(m))+"×10⁴⁵ zg = "
                            +removeSciNo(String.valueOf(m))+"×10⁴² ag = "
                            +removeSciNo(String.valueOf(m))+"×10³⁹ fg = "
                            +removeSciNo(String.valueOf(m))+ "×10³⁶ pg");
                    sonucAgirlik2.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10³³ ng = "
                            +removeSciNo(String.valueOf(m))+"×10³⁰ µg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁷ mg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁶ cg = "
                            +removeSciNo(String.valueOf(m))+"×10²⁵ dg");
                    on = ons(m);        // grami onsa cevirip imperial sistemi ons üzerinden hesaplatmak icin
                    sonucAgirlik3.setText(" = "+removeSciNo(String.valueOf(on))+"×10²⁴ oz");
                    sonucAgirlik4.setText(" = "+removeSciNo(pound(on*10000))+"×10²⁰ lb = "
                            +removeSciNo(stone(on*10000))+"×10²⁰ st");
                    sonucAgirlik5.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10²⁴ g = "
                            +removeSciNo(String.valueOf(m))+"×10²³ dag = "
                            +removeSciNo(String.valueOf(m))+"×10²² hg = "
                            +removeSciNo(String.valueOf(m))+"×10²¹ kg = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁸ Mg");
                    sonucAgirlik6.setText(" = "
                            +removeSciNo(String.valueOf(m))+"×10¹⁵ Gg = "
                            +removeSciNo(String.valueOf(m))+"×10¹² Tg = "
                            +removeSciNo(String.valueOf(m))+"×10⁹ Pg = "
                            +removeSciNo(String.valueOf(m))+"×10⁶ Eg = "
                            +removeSciNo(String.valueOf(m))+"×10³ Zg");
                    break;
                case 21: //on secilirse
                    on = Double.valueOf(degerAgirlik.getText());
                    m=gram(on);
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg = "
                        +String.valueOf(m)+" g");
                    sonucAgirlik3.setText(" = "+pound(on)+" lb");
                    sonucAgirlik4.setText(" = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+damHesapla(m)+" dag = "+hmHesapla(m)+" hg = "
                        +kmHesapla(m)+" kg = "+megametre(m)+" Mg = "+gigametre(m)+" Gg");
                    sonucAgirlik6.setText(" = "+terametre(m)+" Tg = "
                        +petametre(m)+" Pg = "+egzametre(m)+" Eg = "
                        +zettametre(m)+" Zg = "+yottametre(m)+" Yg");
                    break;
                case 22: //po secilirse
                    po = Double.valueOf(degerAgirlik.getText());
                    on=po*16;
                    m=gram(on);
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg = "
                        +String.valueOf(m)+" g");
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+stone(on)+" st");
                    sonucAgirlik5.setText(" = "+damHesapla(m)+" dag = "+hmHesapla(m)+" hg = "
                        +kmHesapla(m)+" kg = "+megametre(m)+" Mg = "+gigametre(m)+" Gg");
                    sonucAgirlik6.setText(" = "+terametre(m)+" Tg = "
                        +petametre(m)+" Pg = "+egzametre(m)+" Eg = "
                        +zettametre(m)+" Zg = "+yottametre(m)+" Yg");
                    break;
                case 23: //sto secilirse
                    sto = Double.valueOf(degerAgirlik.getText());
                    on=sto*224;
                    m=gram(on);
                    sonucAgirlik.setText(" = "+yoktometre(m)+" yg = "
                        +zeptometre(m)+" zg = "+attometre(m)+" ag = "
                        +femtometre(m)+" fg = "+pikometre(m)+ " pg");
                    sonucAgirlik2.setText(" = "+nanometre(m)+" ng = "
                        +mikronHesapla(m)+" µg = "
                        +String.valueOf(mmHesapla(m))+" mg = "
                        +String.valueOf(cmHesapla(m))+" cg = "
                        +String.valueOf(dmHesapla(m))+" dg = "
                        +String.valueOf(m)+" g");
                    sonucAgirlik3.setText(" = "+String.valueOf(on)+" oz");
                    sonucAgirlik4.setText(" = "+pound(on)+" lb");
                    sonucAgirlik5.setText(" = "+damHesapla(m)+" dag = "+hmHesapla(m)+" hg = "
                        +kmHesapla(m)+" kg = "+megametre(m)+" Mg = "+gigametre(m)+" Gg");
                    sonucAgirlik6.setText(" = "+terametre(m)+" Tg = "
                        +petametre(m)+" Pg = "+egzametre(m)+" Eg = "
                        +zettametre(m)+" Zg = "+yottametre(m)+" Yg");
                    break;
                default:
                    break;
            }
        } catch (Exception e) {
            degerAgirlik.setText("Lütfen sayı giriniz!");
        }
    }//GEN-LAST:event_btnAgirlikActionPerformed

    private void degerUzunlukMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_degerUzunlukMouseClicked
        degerUzunluk.setText(null);
    }//GEN-LAST:event_degerUzunlukMouseClicked

    private void degerSicaklikMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_degerSicaklikMouseClicked
        degerSicaklik.setText(null);
    }//GEN-LAST:event_degerSicaklikMouseClicked

    private void degerAgirlikMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_degerAgirlikMouseClicked
        degerAgirlik.setText(null);
    }//GEN-LAST:event_degerAgirlikMouseClicked

    private void degerHacimMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_degerHacimMouseClicked
        degerHacim.setText(null);
    }//GEN-LAST:event_degerHacimMouseClicked

    private void degerAlanMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_degerAlanMouseClicked
        degerAlan.setText(null);
    }//GEN-LAST:event_degerAlanMouseClicked

    private void degerHizMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_degerHizMouseClicked
        degerHiz.setText(null);
    }//GEN-LAST:event_degerHizMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        JOptionPane.showMessageDialog(this, "Yücelen Üstün \n1811012066 "
                + "\nSdü Bilgisayar Mühendisliği "
                + "\nBirinci Öğretim - 4. Sınıf "
                + "\nMühendislikte Bilgisayar Uygulamaları Dersi Projesi"
                ,"Proje Sahibi",JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Donusturucu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Donusturucu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Donusturucu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Donusturucu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Donusturucu().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox birimAgirlik;
    private javax.swing.JComboBox birimAlan;
    private javax.swing.JComboBox birimHacim;
    private javax.swing.JComboBox birimHiz;
    private javax.swing.JComboBox birimSicaklik;
    private javax.swing.JComboBox birimUzunluk;
    private javax.swing.JButton btnAgirlik;
    private javax.swing.JButton btnAlan;
    private javax.swing.JButton btnHacim;
    private javax.swing.JButton btnHiz;
    private javax.swing.JButton btnSicaklik;
    private javax.swing.JButton btnUzunluk;
    private javax.swing.JTextField degerAgirlik;
    private javax.swing.JTextField degerAlan;
    private javax.swing.JTextField degerHacim;
    private javax.swing.JTextField degerHiz;
    private javax.swing.JTextField degerSicaklik;
    private javax.swing.JTextField degerUzunluk;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel panelAgirlik;
    private javax.swing.JPanel panelAlan;
    private javax.swing.JPanel panelHacim;
    private javax.swing.JPanel panelHiz;
    private javax.swing.JPanel panelSicaklik;
    private javax.swing.JPanel panelUzunluk;
    private javax.swing.JTextField sonucAgirlik;
    private javax.swing.JTextField sonucAgirlik2;
    private javax.swing.JTextField sonucAgirlik3;
    private javax.swing.JTextField sonucAgirlik4;
    private javax.swing.JTextField sonucAgirlik5;
    private javax.swing.JTextField sonucAgirlik6;
    private javax.swing.JTextField sonucAlan2;
    private javax.swing.JTextField sonucAlan3;
    private javax.swing.JTextField sonucAlan4;
    private javax.swing.JTextField sonucAlan5;
    private javax.swing.JTextField sonucHacim;
    private javax.swing.JTextField sonucHacim2;
    private javax.swing.JTextField sonucHacim3;
    private javax.swing.JTextField sonucHacim4;
    private javax.swing.JTextField sonucHacim5;
    private javax.swing.JTextField sonucHacim6;
    private javax.swing.JTextField sonucHiz;
    private javax.swing.JTextField sonucSicaklik;
    private javax.swing.JTextField sonucUzunluk;
    private javax.swing.JTextField sonucUzunluk2;
    private javax.swing.JTextField sonucUzunluk3;
    private javax.swing.JTextField sonucUzunluk4;
    private javax.swing.JTextField sonucUzunluk5;
    private javax.swing.JTextField sonucUzunluk6;
    private javax.swing.JTabbedPane tabbedPane;
    // End of variables declaration//GEN-END:variables
}
